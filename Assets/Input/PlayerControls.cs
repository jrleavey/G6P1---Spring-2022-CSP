//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Controller"",
            ""id"": ""e02af8d7-6d94-41f6-a243-4668b15ed282"",
            ""actions"": [
                {
                    ""name"": ""Left Stick Movement"",
                    ""type"": ""Value"",
                    ""id"": ""0cba0158-90b7-42d1-94ad-1ed9a8b4ae3f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Left Stick Click"",
                    ""type"": ""Button"",
                    ""id"": ""034a934f-ba9c-4cad-9fda-971060553831"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left Trigger"",
                    ""type"": ""Button"",
                    ""id"": ""76c84965-7df2-4ffa-8894-fadd69cc0b7c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""01485ad3-3ff6-461a-a7e3-55e3c90de89c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""a10c8e19-2098-48d6-9470-3efae66f0f4f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""552170f7-0d90-4be8-8ec6-7539f1a91d27"",
                    ""path"": ""<XInputController>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left Stick Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d2c4ddc8-650f-4ac3-96b3-ad1beb93a8f4"",
                    ""path"": ""<XInputController>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left Stick Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9975ff80-e4ab-4a5a-98d8-a11cb4f9ffb1"",
                    ""path"": ""<XInputController>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left Trigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0855e71a-f5c3-4b98-b1b2-8b6863602569"",
                    ""path"": ""<XInputController>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""31d7f76e-edd8-45d5-9bd6-6b42a3f7a31b"",
                    ""path"": ""<XInputController>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Controller
        m_Controller = asset.FindActionMap("Controller", throwIfNotFound: true);
        m_Controller_LeftStickMovement = m_Controller.FindAction("Left Stick Movement", throwIfNotFound: true);
        m_Controller_LeftStickClick = m_Controller.FindAction("Left Stick Click", throwIfNotFound: true);
        m_Controller_LeftTrigger = m_Controller.FindAction("Left Trigger", throwIfNotFound: true);
        m_Controller_Interact = m_Controller.FindAction("Interact", throwIfNotFound: true);
        m_Controller_Menu = m_Controller.FindAction("Menu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Controller
    private readonly InputActionMap m_Controller;
    private IControllerActions m_ControllerActionsCallbackInterface;
    private readonly InputAction m_Controller_LeftStickMovement;
    private readonly InputAction m_Controller_LeftStickClick;
    private readonly InputAction m_Controller_LeftTrigger;
    private readonly InputAction m_Controller_Interact;
    private readonly InputAction m_Controller_Menu;
    public struct ControllerActions
    {
        private @PlayerControls m_Wrapper;
        public ControllerActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftStickMovement => m_Wrapper.m_Controller_LeftStickMovement;
        public InputAction @LeftStickClick => m_Wrapper.m_Controller_LeftStickClick;
        public InputAction @LeftTrigger => m_Wrapper.m_Controller_LeftTrigger;
        public InputAction @Interact => m_Wrapper.m_Controller_Interact;
        public InputAction @Menu => m_Wrapper.m_Controller_Menu;
        public InputActionMap Get() { return m_Wrapper.m_Controller; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControllerActions set) { return set.Get(); }
        public void SetCallbacks(IControllerActions instance)
        {
            if (m_Wrapper.m_ControllerActionsCallbackInterface != null)
            {
                @LeftStickMovement.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnLeftStickMovement;
                @LeftStickMovement.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnLeftStickMovement;
                @LeftStickMovement.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnLeftStickMovement;
                @LeftStickClick.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnLeftStickClick;
                @LeftStickClick.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnLeftStickClick;
                @LeftStickClick.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnLeftStickClick;
                @LeftTrigger.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnLeftTrigger;
                @LeftTrigger.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnLeftTrigger;
                @LeftTrigger.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnLeftTrigger;
                @Interact.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnInteract;
                @Menu.started -= m_Wrapper.m_ControllerActionsCallbackInterface.OnMenu;
                @Menu.performed -= m_Wrapper.m_ControllerActionsCallbackInterface.OnMenu;
                @Menu.canceled -= m_Wrapper.m_ControllerActionsCallbackInterface.OnMenu;
            }
            m_Wrapper.m_ControllerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LeftStickMovement.started += instance.OnLeftStickMovement;
                @LeftStickMovement.performed += instance.OnLeftStickMovement;
                @LeftStickMovement.canceled += instance.OnLeftStickMovement;
                @LeftStickClick.started += instance.OnLeftStickClick;
                @LeftStickClick.performed += instance.OnLeftStickClick;
                @LeftStickClick.canceled += instance.OnLeftStickClick;
                @LeftTrigger.started += instance.OnLeftTrigger;
                @LeftTrigger.performed += instance.OnLeftTrigger;
                @LeftTrigger.canceled += instance.OnLeftTrigger;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @Menu.started += instance.OnMenu;
                @Menu.performed += instance.OnMenu;
                @Menu.canceled += instance.OnMenu;
            }
        }
    }
    public ControllerActions @Controller => new ControllerActions(this);
    public interface IControllerActions
    {
        void OnLeftStickMovement(InputAction.CallbackContext context);
        void OnLeftStickClick(InputAction.CallbackContext context);
        void OnLeftTrigger(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnMenu(InputAction.CallbackContext context);
    }
}
